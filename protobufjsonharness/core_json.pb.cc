// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core_json.proto

#include "core_json.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr core_json_pair::core_json_pair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(nullptr)
  , querykey_(nullptr){}
struct core_json_pairDefaultTypeInternal {
  constexpr core_json_pairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~core_json_pairDefaultTypeInternal() {}
  union {
    core_json_pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT core_json_pairDefaultTypeInternal _core_json_pair_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_5fjson_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_5fjson_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_5fjson_2eproto = nullptr;

const uint32_t TableStruct_core_5fjson_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core_json_pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core_json_pair, buffer_),
  PROTOBUF_FIELD_OFFSET(::core_json_pair, querykey_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::core_json_pair)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_core_json_pair_default_instance_),
};

const char descriptor_table_protodef_core_5fjson_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017core_json.proto\032\njson.proto\032\020field_mas"
  "k.proto\"K\n\016core_json_pair\022\033\n\006buffer\030\001 \001("
  "\0132\013.JSON_value\022\034\n\010queryKey\030\002 \001(\0132\n.Field"
  "Maskb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_core_5fjson_2eproto_deps[2] = {
  &::descriptor_table_field_5fmask_2eproto,
  &::descriptor_table_json_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_5fjson_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_5fjson_2eproto = {
  false, false, 132, descriptor_table_protodef_core_5fjson_2eproto, "core_json.proto", 
  &descriptor_table_core_5fjson_2eproto_once, descriptor_table_core_5fjson_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_core_5fjson_2eproto::offsets,
  file_level_metadata_core_5fjson_2eproto, file_level_enum_descriptors_core_5fjson_2eproto, file_level_service_descriptors_core_5fjson_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_5fjson_2eproto_getter() {
  return &descriptor_table_core_5fjson_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_5fjson_2eproto(&descriptor_table_core_5fjson_2eproto);

// ===================================================================

class core_json_pair::_Internal {
 public:
  static const ::JSON_value& buffer(const core_json_pair* msg);
  static const ::FieldMask& querykey(const core_json_pair* msg);
};

const ::JSON_value&
core_json_pair::_Internal::buffer(const core_json_pair* msg) {
  return *msg->buffer_;
}
const ::FieldMask&
core_json_pair::_Internal::querykey(const core_json_pair* msg) {
  return *msg->querykey_;
}
void core_json_pair::clear_buffer() {
  if (GetArenaForAllocation() == nullptr && buffer_ != nullptr) {
    delete buffer_;
  }
  buffer_ = nullptr;
}
void core_json_pair::clear_querykey() {
  if (GetArenaForAllocation() == nullptr && querykey_ != nullptr) {
    delete querykey_;
  }
  querykey_ = nullptr;
}
core_json_pair::core_json_pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core_json_pair)
}
core_json_pair::core_json_pair(const core_json_pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_buffer()) {
    buffer_ = new ::JSON_value(*from.buffer_);
  } else {
    buffer_ = nullptr;
  }
  if (from._internal_has_querykey()) {
    querykey_ = new ::FieldMask(*from.querykey_);
  } else {
    querykey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:core_json_pair)
}

inline void core_json_pair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buffer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&querykey_) -
    reinterpret_cast<char*>(&buffer_)) + sizeof(querykey_));
}

core_json_pair::~core_json_pair() {
  // @@protoc_insertion_point(destructor:core_json_pair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void core_json_pair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete buffer_;
  if (this != internal_default_instance()) delete querykey_;
}

void core_json_pair::ArenaDtor(void* object) {
  core_json_pair* _this = reinterpret_cast< core_json_pair* >(object);
  (void)_this;
}
void core_json_pair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void core_json_pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void core_json_pair::Clear() {
// @@protoc_insertion_point(message_clear_start:core_json_pair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && buffer_ != nullptr) {
    delete buffer_;
  }
  buffer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && querykey_ != nullptr) {
    delete querykey_;
  }
  querykey_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* core_json_pair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JSON_value buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FieldMask queryKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_querykey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* core_json_pair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core_json_pair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JSON_value buffer = 1;
  if (this->_internal_has_buffer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::buffer(this), target, stream);
  }

  // .FieldMask queryKey = 2;
  if (this->_internal_has_querykey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::querykey(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core_json_pair)
  return target;
}

size_t core_json_pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core_json_pair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .JSON_value buffer = 1;
  if (this->_internal_has_buffer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buffer_);
  }

  // .FieldMask queryKey = 2;
  if (this->_internal_has_querykey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *querykey_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData core_json_pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    core_json_pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*core_json_pair::GetClassData() const { return &_class_data_; }

void core_json_pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<core_json_pair *>(to)->MergeFrom(
      static_cast<const core_json_pair &>(from));
}


void core_json_pair::MergeFrom(const core_json_pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core_json_pair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_buffer()) {
    _internal_mutable_buffer()->::JSON_value::MergeFrom(from._internal_buffer());
  }
  if (from._internal_has_querykey()) {
    _internal_mutable_querykey()->::FieldMask::MergeFrom(from._internal_querykey());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void core_json_pair::CopyFrom(const core_json_pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core_json_pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool core_json_pair::IsInitialized() const {
  return true;
}

void core_json_pair::InternalSwap(core_json_pair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(core_json_pair, querykey_)
      + sizeof(core_json_pair::querykey_)
      - PROTOBUF_FIELD_OFFSET(core_json_pair, buffer_)>(
          reinterpret_cast<char*>(&buffer_),
          reinterpret_cast<char*>(&other->buffer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata core_json_pair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_5fjson_2eproto_getter, &descriptor_table_core_5fjson_2eproto_once,
      file_level_metadata_core_5fjson_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::core_json_pair* Arena::CreateMaybeMessage< ::core_json_pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core_json_pair >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
