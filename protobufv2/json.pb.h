// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: json.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_json_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_json_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_json_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_json_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_json_2eproto;
class JSON_array;
struct JSON_arrayDefaultTypeInternal;
extern JSON_arrayDefaultTypeInternal _JSON_array_default_instance_;
class JSON_array_item;
struct JSON_array_itemDefaultTypeInternal;
extern JSON_array_itemDefaultTypeInternal _JSON_array_item_default_instance_;
class JSON_inp;
struct JSON_inpDefaultTypeInternal;
extern JSON_inpDefaultTypeInternal _JSON_inp_default_instance_;
class JSON_key_value_pair;
struct JSON_key_value_pairDefaultTypeInternal;
extern JSON_key_value_pairDefaultTypeInternal _JSON_key_value_pair_default_instance_;
class JSON_null;
struct JSON_nullDefaultTypeInternal;
extern JSON_nullDefaultTypeInternal _JSON_null_default_instance_;
class JSON_number;
struct JSON_numberDefaultTypeInternal;
extern JSON_numberDefaultTypeInternal _JSON_number_default_instance_;
class JSON_object;
struct JSON_objectDefaultTypeInternal;
extern JSON_objectDefaultTypeInternal _JSON_object_default_instance_;
class JSON_opt;
struct JSON_optDefaultTypeInternal;
extern JSON_optDefaultTypeInternal _JSON_opt_default_instance_;
class JSON_value;
struct JSON_valueDefaultTypeInternal;
extern JSON_valueDefaultTypeInternal _JSON_value_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::JSON_array* Arena::CreateMaybeMessage<::JSON_array>(Arena*);
template<> ::JSON_array_item* Arena::CreateMaybeMessage<::JSON_array_item>(Arena*);
template<> ::JSON_inp* Arena::CreateMaybeMessage<::JSON_inp>(Arena*);
template<> ::JSON_key_value_pair* Arena::CreateMaybeMessage<::JSON_key_value_pair>(Arena*);
template<> ::JSON_null* Arena::CreateMaybeMessage<::JSON_null>(Arena*);
template<> ::JSON_number* Arena::CreateMaybeMessage<::JSON_number>(Arena*);
template<> ::JSON_object* Arena::CreateMaybeMessage<::JSON_object>(Arena*);
template<> ::JSON_opt* Arena::CreateMaybeMessage<::JSON_opt>(Arena*);
template<> ::JSON_value* Arena::CreateMaybeMessage<::JSON_value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class JSON_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSON_value) */ {
 public:
  inline JSON_value() : JSON_value(nullptr) {}
  ~JSON_value() override;
  explicit PROTOBUF_CONSTEXPR JSON_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JSON_value(const JSON_value& from);
  JSON_value(JSON_value&& from) noexcept
    : JSON_value() {
    *this = ::std::move(from);
  }

  inline JSON_value& operator=(const JSON_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSON_value& operator=(JSON_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JSON_value& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kObj = 1,
    kArr = 2,
    kNum = 3,
    kNull = 4,
    kStr = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const JSON_value* internal_default_instance() {
    return reinterpret_cast<const JSON_value*>(
               &_JSON_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JSON_value& a, JSON_value& b) {
    a.Swap(&b);
  }
  inline void Swap(JSON_value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JSON_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JSON_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JSON_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JSON_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JSON_value& from) {
    JSON_value::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSON_value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSON_value";
  }
  protected:
  explicit JSON_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 1,
    kArrFieldNumber = 2,
    kNumFieldNumber = 3,
    kNullFieldNumber = 4,
    kStrFieldNumber = 5,
  };
  // .JSON_object obj = 1;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::JSON_object& obj() const;
  PROTOBUF_NODISCARD ::JSON_object* release_obj();
  ::JSON_object* mutable_obj();
  void set_allocated_obj(::JSON_object* obj);
  private:
  const ::JSON_object& _internal_obj() const;
  ::JSON_object* _internal_mutable_obj();
  public:
  void unsafe_arena_set_allocated_obj(
      ::JSON_object* obj);
  ::JSON_object* unsafe_arena_release_obj();

  // .JSON_array arr = 2;
  bool has_arr() const;
  private:
  bool _internal_has_arr() const;
  public:
  void clear_arr();
  const ::JSON_array& arr() const;
  PROTOBUF_NODISCARD ::JSON_array* release_arr();
  ::JSON_array* mutable_arr();
  void set_allocated_arr(::JSON_array* arr);
  private:
  const ::JSON_array& _internal_arr() const;
  ::JSON_array* _internal_mutable_arr();
  public:
  void unsafe_arena_set_allocated_arr(
      ::JSON_array* arr);
  ::JSON_array* unsafe_arena_release_arr();

  // .JSON_number num = 3;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  const ::JSON_number& num() const;
  PROTOBUF_NODISCARD ::JSON_number* release_num();
  ::JSON_number* mutable_num();
  void set_allocated_num(::JSON_number* num);
  private:
  const ::JSON_number& _internal_num() const;
  ::JSON_number* _internal_mutable_num();
  public:
  void unsafe_arena_set_allocated_num(
      ::JSON_number* num);
  ::JSON_number* unsafe_arena_release_num();

  // .JSON_null null = 4;
  bool has_null() const;
  private:
  bool _internal_has_null() const;
  public:
  void clear_null();
  const ::JSON_null& null() const;
  PROTOBUF_NODISCARD ::JSON_null* release_null();
  ::JSON_null* mutable_null();
  void set_allocated_null(::JSON_null* null);
  private:
  const ::JSON_null& _internal_null() const;
  ::JSON_null* _internal_mutable_null();
  public:
  void unsafe_arena_set_allocated_null(
      ::JSON_null* null);
  ::JSON_null* unsafe_arena_release_null();

  // string str = 5;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:JSON_value)
 private:
  class _Internal;
  void set_has_obj();
  void set_has_arr();
  void set_has_num();
  void set_has_null();
  void set_has_str();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::JSON_object* obj_;
      ::JSON_array* arr_;
      ::JSON_number* num_;
      ::JSON_null* null_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_2eproto;
};
// -------------------------------------------------------------------

class JSON_object final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSON_object) */ {
 public:
  inline JSON_object() : JSON_object(nullptr) {}
  ~JSON_object() override;
  explicit PROTOBUF_CONSTEXPR JSON_object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JSON_object(const JSON_object& from);
  JSON_object(JSON_object&& from) noexcept
    : JSON_object() {
    *this = ::std::move(from);
  }

  inline JSON_object& operator=(const JSON_object& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSON_object& operator=(JSON_object&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JSON_object& default_instance() {
    return *internal_default_instance();
  }
  static inline const JSON_object* internal_default_instance() {
    return reinterpret_cast<const JSON_object*>(
               &_JSON_object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JSON_object& a, JSON_object& b) {
    a.Swap(&b);
  }
  inline void Swap(JSON_object* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JSON_object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JSON_object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JSON_object>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JSON_object& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JSON_object& from) {
    JSON_object::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSON_object* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSON_object";
  }
  protected:
  explicit JSON_object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvPairFieldNumber = 1,
  };
  // repeated .JSON_key_value_pair kv_pair = 1;
  int kv_pair_size() const;
  private:
  int _internal_kv_pair_size() const;
  public:
  void clear_kv_pair();
  ::JSON_key_value_pair* mutable_kv_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSON_key_value_pair >*
      mutable_kv_pair();
  private:
  const ::JSON_key_value_pair& _internal_kv_pair(int index) const;
  ::JSON_key_value_pair* _internal_add_kv_pair();
  public:
  const ::JSON_key_value_pair& kv_pair(int index) const;
  ::JSON_key_value_pair* add_kv_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSON_key_value_pair >&
      kv_pair() const;

  // @@protoc_insertion_point(class_scope:JSON_object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSON_key_value_pair > kv_pair_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_2eproto;
};
// -------------------------------------------------------------------

class JSON_key_value_pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSON_key_value_pair) */ {
 public:
  inline JSON_key_value_pair() : JSON_key_value_pair(nullptr) {}
  ~JSON_key_value_pair() override;
  explicit PROTOBUF_CONSTEXPR JSON_key_value_pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JSON_key_value_pair(const JSON_key_value_pair& from);
  JSON_key_value_pair(JSON_key_value_pair&& from) noexcept
    : JSON_key_value_pair() {
    *this = ::std::move(from);
  }

  inline JSON_key_value_pair& operator=(const JSON_key_value_pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSON_key_value_pair& operator=(JSON_key_value_pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JSON_key_value_pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const JSON_key_value_pair* internal_default_instance() {
    return reinterpret_cast<const JSON_key_value_pair*>(
               &_JSON_key_value_pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JSON_key_value_pair& a, JSON_key_value_pair& b) {
    a.Swap(&b);
  }
  inline void Swap(JSON_key_value_pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JSON_key_value_pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JSON_key_value_pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JSON_key_value_pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JSON_key_value_pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JSON_key_value_pair& from) {
    JSON_key_value_pair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSON_key_value_pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSON_key_value_pair";
  }
  protected:
  explicit JSON_key_value_pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .JSON_value value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::JSON_value& value() const;
  PROTOBUF_NODISCARD ::JSON_value* release_value();
  ::JSON_value* mutable_value();
  void set_allocated_value(::JSON_value* value);
  private:
  const ::JSON_value& _internal_value() const;
  ::JSON_value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::JSON_value* value);
  ::JSON_value* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:JSON_key_value_pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::JSON_value* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_2eproto;
};
// -------------------------------------------------------------------

class JSON_array final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSON_array) */ {
 public:
  inline JSON_array() : JSON_array(nullptr) {}
  ~JSON_array() override;
  explicit PROTOBUF_CONSTEXPR JSON_array(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JSON_array(const JSON_array& from);
  JSON_array(JSON_array&& from) noexcept
    : JSON_array() {
    *this = ::std::move(from);
  }

  inline JSON_array& operator=(const JSON_array& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSON_array& operator=(JSON_array&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JSON_array& default_instance() {
    return *internal_default_instance();
  }
  static inline const JSON_array* internal_default_instance() {
    return reinterpret_cast<const JSON_array*>(
               &_JSON_array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JSON_array& a, JSON_array& b) {
    a.Swap(&b);
  }
  inline void Swap(JSON_array* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JSON_array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JSON_array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JSON_array>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JSON_array& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JSON_array& from) {
    JSON_array::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSON_array* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSON_array";
  }
  protected:
  explicit JSON_array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .JSON_array_item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::JSON_array_item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSON_array_item >*
      mutable_items();
  private:
  const ::JSON_array_item& _internal_items(int index) const;
  ::JSON_array_item* _internal_add_items();
  public:
  const ::JSON_array_item& items(int index) const;
  ::JSON_array_item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSON_array_item >&
      items() const;

  // @@protoc_insertion_point(class_scope:JSON_array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSON_array_item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_2eproto;
};
// -------------------------------------------------------------------

class JSON_array_item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSON_array_item) */ {
 public:
  inline JSON_array_item() : JSON_array_item(nullptr) {}
  ~JSON_array_item() override;
  explicit PROTOBUF_CONSTEXPR JSON_array_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JSON_array_item(const JSON_array_item& from);
  JSON_array_item(JSON_array_item&& from) noexcept
    : JSON_array_item() {
    *this = ::std::move(from);
  }

  inline JSON_array_item& operator=(const JSON_array_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSON_array_item& operator=(JSON_array_item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JSON_array_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const JSON_array_item* internal_default_instance() {
    return reinterpret_cast<const JSON_array_item*>(
               &_JSON_array_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JSON_array_item& a, JSON_array_item& b) {
    a.Swap(&b);
  }
  inline void Swap(JSON_array_item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JSON_array_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JSON_array_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JSON_array_item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JSON_array_item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JSON_array_item& from) {
    JSON_array_item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSON_array_item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSON_array_item";
  }
  protected:
  explicit JSON_array_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .JSON_value value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::JSON_value& value() const;
  PROTOBUF_NODISCARD ::JSON_value* release_value();
  ::JSON_value* mutable_value();
  void set_allocated_value(::JSON_value* value);
  private:
  const ::JSON_value& _internal_value() const;
  ::JSON_value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::JSON_value* value);
  ::JSON_value* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:JSON_array_item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::JSON_value* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_2eproto;
};
// -------------------------------------------------------------------

class JSON_number final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSON_number) */ {
 public:
  inline JSON_number() : JSON_number(nullptr) {}
  ~JSON_number() override;
  explicit PROTOBUF_CONSTEXPR JSON_number(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JSON_number(const JSON_number& from);
  JSON_number(JSON_number&& from) noexcept
    : JSON_number() {
    *this = ::std::move(from);
  }

  inline JSON_number& operator=(const JSON_number& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSON_number& operator=(JSON_number&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JSON_number& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kLong = 1,
    kDouble = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const JSON_number* internal_default_instance() {
    return reinterpret_cast<const JSON_number*>(
               &_JSON_number_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JSON_number& a, JSON_number& b) {
    a.Swap(&b);
  }
  inline void Swap(JSON_number* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JSON_number* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JSON_number* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JSON_number>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JSON_number& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JSON_number& from) {
    JSON_number::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSON_number* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSON_number";
  }
  protected:
  explicit JSON_number(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongFieldNumber = 1,
    kDoubleFieldNumber = 2,
  };
  // int64 long = 1;
  bool has_long_() const;
  private:
  bool _internal_has_long_() const;
  public:
  void clear_long_();
  int64_t long_() const;
  void set_long_(int64_t value);
  private:
  int64_t _internal_long_() const;
  void _internal_set_long_(int64_t value);
  public:

  // double double = 2;
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  double double_() const;
  void set_double_(double value);
  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:JSON_number)
 private:
  class _Internal;
  void set_has_long_();
  void set_has_double_();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t long__;
      double double__;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_2eproto;
};
// -------------------------------------------------------------------

class JSON_null final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:JSON_null) */ {
 public:
  inline JSON_null() : JSON_null(nullptr) {}
  explicit PROTOBUF_CONSTEXPR JSON_null(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JSON_null(const JSON_null& from);
  JSON_null(JSON_null&& from) noexcept
    : JSON_null() {
    *this = ::std::move(from);
  }

  inline JSON_null& operator=(const JSON_null& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSON_null& operator=(JSON_null&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JSON_null& default_instance() {
    return *internal_default_instance();
  }
  static inline const JSON_null* internal_default_instance() {
    return reinterpret_cast<const JSON_null*>(
               &_JSON_null_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JSON_null& a, JSON_null& b) {
    a.Swap(&b);
  }
  inline void Swap(JSON_null* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JSON_null* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JSON_null* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JSON_null>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const JSON_null& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const JSON_null& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSON_null";
  }
  protected:
  explicit JSON_null(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSON_null)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_json_2eproto;
};
// -------------------------------------------------------------------

class JSON_inp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSON_inp) */ {
 public:
  inline JSON_inp() : JSON_inp(nullptr) {}
  ~JSON_inp() override;
  explicit PROTOBUF_CONSTEXPR JSON_inp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JSON_inp(const JSON_inp& from);
  JSON_inp(JSON_inp&& from) noexcept
    : JSON_inp() {
    *this = ::std::move(from);
  }

  inline JSON_inp& operator=(const JSON_inp& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSON_inp& operator=(JSON_inp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JSON_inp& default_instance() {
    return *internal_default_instance();
  }
  static inline const JSON_inp* internal_default_instance() {
    return reinterpret_cast<const JSON_inp*>(
               &_JSON_inp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(JSON_inp& a, JSON_inp& b) {
    a.Swap(&b);
  }
  inline void Swap(JSON_inp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JSON_inp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JSON_inp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JSON_inp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JSON_inp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JSON_inp& from) {
    JSON_inp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSON_inp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSON_inp";
  }
  protected:
  explicit JSON_inp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 1,
    kKvPairFieldNumber = 2,
  };
  // .JSON_object obj = 1;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::JSON_object& obj() const;
  PROTOBUF_NODISCARD ::JSON_object* release_obj();
  ::JSON_object* mutable_obj();
  void set_allocated_obj(::JSON_object* obj);
  private:
  const ::JSON_object& _internal_obj() const;
  ::JSON_object* _internal_mutable_obj();
  public:
  void unsafe_arena_set_allocated_obj(
      ::JSON_object* obj);
  ::JSON_object* unsafe_arena_release_obj();

  // .JSON_key_value_pair kv_pair = 2;
  bool has_kv_pair() const;
  private:
  bool _internal_has_kv_pair() const;
  public:
  void clear_kv_pair();
  const ::JSON_key_value_pair& kv_pair() const;
  PROTOBUF_NODISCARD ::JSON_key_value_pair* release_kv_pair();
  ::JSON_key_value_pair* mutable_kv_pair();
  void set_allocated_kv_pair(::JSON_key_value_pair* kv_pair);
  private:
  const ::JSON_key_value_pair& _internal_kv_pair() const;
  ::JSON_key_value_pair* _internal_mutable_kv_pair();
  public:
  void unsafe_arena_set_allocated_kv_pair(
      ::JSON_key_value_pair* kv_pair);
  ::JSON_key_value_pair* unsafe_arena_release_kv_pair();

  // @@protoc_insertion_point(class_scope:JSON_inp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::JSON_object* obj_;
    ::JSON_key_value_pair* kv_pair_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_2eproto;
};
// -------------------------------------------------------------------

class JSON_opt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSON_opt) */ {
 public:
  inline JSON_opt() : JSON_opt(nullptr) {}
  ~JSON_opt() override;
  explicit PROTOBUF_CONSTEXPR JSON_opt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JSON_opt(const JSON_opt& from);
  JSON_opt(JSON_opt&& from) noexcept
    : JSON_opt() {
    *this = ::std::move(from);
  }

  inline JSON_opt& operator=(const JSON_opt& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSON_opt& operator=(JSON_opt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JSON_opt& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kInp = 1,
    kObj = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const JSON_opt* internal_default_instance() {
    return reinterpret_cast<const JSON_opt*>(
               &_JSON_opt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(JSON_opt& a, JSON_opt& b) {
    a.Swap(&b);
  }
  inline void Swap(JSON_opt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JSON_opt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JSON_opt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JSON_opt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JSON_opt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JSON_opt& from) {
    JSON_opt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSON_opt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSON_opt";
  }
  protected:
  explicit JSON_opt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInpFieldNumber = 1,
    kObjFieldNumber = 2,
  };
  // .JSON_inp inp = 1;
  bool has_inp() const;
  private:
  bool _internal_has_inp() const;
  public:
  void clear_inp();
  const ::JSON_inp& inp() const;
  PROTOBUF_NODISCARD ::JSON_inp* release_inp();
  ::JSON_inp* mutable_inp();
  void set_allocated_inp(::JSON_inp* inp);
  private:
  const ::JSON_inp& _internal_inp() const;
  ::JSON_inp* _internal_mutable_inp();
  public:
  void unsafe_arena_set_allocated_inp(
      ::JSON_inp* inp);
  ::JSON_inp* unsafe_arena_release_inp();

  // .JSON_object obj = 2;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::JSON_object& obj() const;
  PROTOBUF_NODISCARD ::JSON_object* release_obj();
  ::JSON_object* mutable_obj();
  void set_allocated_obj(::JSON_object* obj);
  private:
  const ::JSON_object& _internal_obj() const;
  ::JSON_object* _internal_mutable_obj();
  public:
  void unsafe_arena_set_allocated_obj(
      ::JSON_object* obj);
  ::JSON_object* unsafe_arena_release_obj();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:JSON_opt)
 private:
  class _Internal;
  void set_has_inp();
  void set_has_obj();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::JSON_inp* inp_;
      ::JSON_object* obj_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JSON_value

// .JSON_object obj = 1;
inline bool JSON_value::_internal_has_obj() const {
  return value_case() == kObj;
}
inline bool JSON_value::has_obj() const {
  return _internal_has_obj();
}
inline void JSON_value::set_has_obj() {
  _impl_._oneof_case_[0] = kObj;
}
inline void JSON_value::clear_obj() {
  if (_internal_has_obj()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.obj_;
    }
    clear_has_value();
  }
}
inline ::JSON_object* JSON_value::release_obj() {
  // @@protoc_insertion_point(field_release:JSON_value.obj)
  if (_internal_has_obj()) {
    clear_has_value();
    ::JSON_object* temp = _impl_.value_.obj_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.obj_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JSON_object& JSON_value::_internal_obj() const {
  return _internal_has_obj()
      ? *_impl_.value_.obj_
      : reinterpret_cast< ::JSON_object&>(::_JSON_object_default_instance_);
}
inline const ::JSON_object& JSON_value::obj() const {
  // @@protoc_insertion_point(field_get:JSON_value.obj)
  return _internal_obj();
}
inline ::JSON_object* JSON_value::unsafe_arena_release_obj() {
  // @@protoc_insertion_point(field_unsafe_arena_release:JSON_value.obj)
  if (_internal_has_obj()) {
    clear_has_value();
    ::JSON_object* temp = _impl_.value_.obj_;
    _impl_.value_.obj_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JSON_value::unsafe_arena_set_allocated_obj(::JSON_object* obj) {
  clear_value();
  if (obj) {
    set_has_obj();
    _impl_.value_.obj_ = obj;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSON_value.obj)
}
inline ::JSON_object* JSON_value::_internal_mutable_obj() {
  if (!_internal_has_obj()) {
    clear_value();
    set_has_obj();
    _impl_.value_.obj_ = CreateMaybeMessage< ::JSON_object >(GetArenaForAllocation());
  }
  return _impl_.value_.obj_;
}
inline ::JSON_object* JSON_value::mutable_obj() {
  ::JSON_object* _msg = _internal_mutable_obj();
  // @@protoc_insertion_point(field_mutable:JSON_value.obj)
  return _msg;
}

// .JSON_array arr = 2;
inline bool JSON_value::_internal_has_arr() const {
  return value_case() == kArr;
}
inline bool JSON_value::has_arr() const {
  return _internal_has_arr();
}
inline void JSON_value::set_has_arr() {
  _impl_._oneof_case_[0] = kArr;
}
inline void JSON_value::clear_arr() {
  if (_internal_has_arr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.arr_;
    }
    clear_has_value();
  }
}
inline ::JSON_array* JSON_value::release_arr() {
  // @@protoc_insertion_point(field_release:JSON_value.arr)
  if (_internal_has_arr()) {
    clear_has_value();
    ::JSON_array* temp = _impl_.value_.arr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.arr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JSON_array& JSON_value::_internal_arr() const {
  return _internal_has_arr()
      ? *_impl_.value_.arr_
      : reinterpret_cast< ::JSON_array&>(::_JSON_array_default_instance_);
}
inline const ::JSON_array& JSON_value::arr() const {
  // @@protoc_insertion_point(field_get:JSON_value.arr)
  return _internal_arr();
}
inline ::JSON_array* JSON_value::unsafe_arena_release_arr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:JSON_value.arr)
  if (_internal_has_arr()) {
    clear_has_value();
    ::JSON_array* temp = _impl_.value_.arr_;
    _impl_.value_.arr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JSON_value::unsafe_arena_set_allocated_arr(::JSON_array* arr) {
  clear_value();
  if (arr) {
    set_has_arr();
    _impl_.value_.arr_ = arr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSON_value.arr)
}
inline ::JSON_array* JSON_value::_internal_mutable_arr() {
  if (!_internal_has_arr()) {
    clear_value();
    set_has_arr();
    _impl_.value_.arr_ = CreateMaybeMessage< ::JSON_array >(GetArenaForAllocation());
  }
  return _impl_.value_.arr_;
}
inline ::JSON_array* JSON_value::mutable_arr() {
  ::JSON_array* _msg = _internal_mutable_arr();
  // @@protoc_insertion_point(field_mutable:JSON_value.arr)
  return _msg;
}

// .JSON_number num = 3;
inline bool JSON_value::_internal_has_num() const {
  return value_case() == kNum;
}
inline bool JSON_value::has_num() const {
  return _internal_has_num();
}
inline void JSON_value::set_has_num() {
  _impl_._oneof_case_[0] = kNum;
}
inline void JSON_value::clear_num() {
  if (_internal_has_num()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.num_;
    }
    clear_has_value();
  }
}
inline ::JSON_number* JSON_value::release_num() {
  // @@protoc_insertion_point(field_release:JSON_value.num)
  if (_internal_has_num()) {
    clear_has_value();
    ::JSON_number* temp = _impl_.value_.num_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.num_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JSON_number& JSON_value::_internal_num() const {
  return _internal_has_num()
      ? *_impl_.value_.num_
      : reinterpret_cast< ::JSON_number&>(::_JSON_number_default_instance_);
}
inline const ::JSON_number& JSON_value::num() const {
  // @@protoc_insertion_point(field_get:JSON_value.num)
  return _internal_num();
}
inline ::JSON_number* JSON_value::unsafe_arena_release_num() {
  // @@protoc_insertion_point(field_unsafe_arena_release:JSON_value.num)
  if (_internal_has_num()) {
    clear_has_value();
    ::JSON_number* temp = _impl_.value_.num_;
    _impl_.value_.num_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JSON_value::unsafe_arena_set_allocated_num(::JSON_number* num) {
  clear_value();
  if (num) {
    set_has_num();
    _impl_.value_.num_ = num;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSON_value.num)
}
inline ::JSON_number* JSON_value::_internal_mutable_num() {
  if (!_internal_has_num()) {
    clear_value();
    set_has_num();
    _impl_.value_.num_ = CreateMaybeMessage< ::JSON_number >(GetArenaForAllocation());
  }
  return _impl_.value_.num_;
}
inline ::JSON_number* JSON_value::mutable_num() {
  ::JSON_number* _msg = _internal_mutable_num();
  // @@protoc_insertion_point(field_mutable:JSON_value.num)
  return _msg;
}

// .JSON_null null = 4;
inline bool JSON_value::_internal_has_null() const {
  return value_case() == kNull;
}
inline bool JSON_value::has_null() const {
  return _internal_has_null();
}
inline void JSON_value::set_has_null() {
  _impl_._oneof_case_[0] = kNull;
}
inline void JSON_value::clear_null() {
  if (_internal_has_null()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.null_;
    }
    clear_has_value();
  }
}
inline ::JSON_null* JSON_value::release_null() {
  // @@protoc_insertion_point(field_release:JSON_value.null)
  if (_internal_has_null()) {
    clear_has_value();
    ::JSON_null* temp = _impl_.value_.null_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.null_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JSON_null& JSON_value::_internal_null() const {
  return _internal_has_null()
      ? *_impl_.value_.null_
      : reinterpret_cast< ::JSON_null&>(::_JSON_null_default_instance_);
}
inline const ::JSON_null& JSON_value::null() const {
  // @@protoc_insertion_point(field_get:JSON_value.null)
  return _internal_null();
}
inline ::JSON_null* JSON_value::unsafe_arena_release_null() {
  // @@protoc_insertion_point(field_unsafe_arena_release:JSON_value.null)
  if (_internal_has_null()) {
    clear_has_value();
    ::JSON_null* temp = _impl_.value_.null_;
    _impl_.value_.null_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JSON_value::unsafe_arena_set_allocated_null(::JSON_null* null) {
  clear_value();
  if (null) {
    set_has_null();
    _impl_.value_.null_ = null;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSON_value.null)
}
inline ::JSON_null* JSON_value::_internal_mutable_null() {
  if (!_internal_has_null()) {
    clear_value();
    set_has_null();
    _impl_.value_.null_ = CreateMaybeMessage< ::JSON_null >(GetArenaForAllocation());
  }
  return _impl_.value_.null_;
}
inline ::JSON_null* JSON_value::mutable_null() {
  ::JSON_null* _msg = _internal_mutable_null();
  // @@protoc_insertion_point(field_mutable:JSON_value.null)
  return _msg;
}

// string str = 5;
inline bool JSON_value::_internal_has_str() const {
  return value_case() == kStr;
}
inline bool JSON_value::has_str() const {
  return _internal_has_str();
}
inline void JSON_value::set_has_str() {
  _impl_._oneof_case_[0] = kStr;
}
inline void JSON_value::clear_str() {
  if (_internal_has_str()) {
    _impl_.value_.str_.Destroy();
    clear_has_value();
  }
}
inline const std::string& JSON_value::str() const {
  // @@protoc_insertion_point(field_get:JSON_value.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline void JSON_value::set_str(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  _impl_.value_.str_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:JSON_value.str)
}
inline std::string* JSON_value::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:JSON_value.str)
  return _s;
}
inline const std::string& JSON_value::_internal_str() const {
  if (_internal_has_str()) {
    return _impl_.value_.str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void JSON_value::_internal_set_str(const std::string& value) {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  _impl_.value_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* JSON_value::_internal_mutable_str() {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  return _impl_.value_.str_.Mutable(      GetArenaForAllocation());
}
inline std::string* JSON_value::release_str() {
  // @@protoc_insertion_point(field_release:JSON_value.str)
  if (_internal_has_str()) {
    clear_has_value();
    return _impl_.value_.str_.Release();
  } else {
    return nullptr;
  }
}
inline void JSON_value::set_allocated_str(std::string* str) {
  if (has_value()) {
    clear_value();
  }
  if (str != nullptr) {
    set_has_str();
    _impl_.value_.str_.InitAllocated(str, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:JSON_value.str)
}

inline bool JSON_value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void JSON_value::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline JSON_value::ValueCase JSON_value::value_case() const {
  return JSON_value::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// JSON_object

// repeated .JSON_key_value_pair kv_pair = 1;
inline int JSON_object::_internal_kv_pair_size() const {
  return _impl_.kv_pair_.size();
}
inline int JSON_object::kv_pair_size() const {
  return _internal_kv_pair_size();
}
inline void JSON_object::clear_kv_pair() {
  _impl_.kv_pair_.Clear();
}
inline ::JSON_key_value_pair* JSON_object::mutable_kv_pair(int index) {
  // @@protoc_insertion_point(field_mutable:JSON_object.kv_pair)
  return _impl_.kv_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSON_key_value_pair >*
JSON_object::mutable_kv_pair() {
  // @@protoc_insertion_point(field_mutable_list:JSON_object.kv_pair)
  return &_impl_.kv_pair_;
}
inline const ::JSON_key_value_pair& JSON_object::_internal_kv_pair(int index) const {
  return _impl_.kv_pair_.Get(index);
}
inline const ::JSON_key_value_pair& JSON_object::kv_pair(int index) const {
  // @@protoc_insertion_point(field_get:JSON_object.kv_pair)
  return _internal_kv_pair(index);
}
inline ::JSON_key_value_pair* JSON_object::_internal_add_kv_pair() {
  return _impl_.kv_pair_.Add();
}
inline ::JSON_key_value_pair* JSON_object::add_kv_pair() {
  ::JSON_key_value_pair* _add = _internal_add_kv_pair();
  // @@protoc_insertion_point(field_add:JSON_object.kv_pair)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSON_key_value_pair >&
JSON_object::kv_pair() const {
  // @@protoc_insertion_point(field_list:JSON_object.kv_pair)
  return _impl_.kv_pair_;
}

// -------------------------------------------------------------------

// JSON_key_value_pair

// string key = 1;
inline void JSON_key_value_pair::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& JSON_key_value_pair::key() const {
  // @@protoc_insertion_point(field_get:JSON_key_value_pair.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JSON_key_value_pair::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:JSON_key_value_pair.key)
}
inline std::string* JSON_key_value_pair::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:JSON_key_value_pair.key)
  return _s;
}
inline const std::string& JSON_key_value_pair::_internal_key() const {
  return _impl_.key_.Get();
}
inline void JSON_key_value_pair::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* JSON_key_value_pair::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* JSON_key_value_pair::release_key() {
  // @@protoc_insertion_point(field_release:JSON_key_value_pair.key)
  return _impl_.key_.Release();
}
inline void JSON_key_value_pair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:JSON_key_value_pair.key)
}

// .JSON_value value = 2;
inline bool JSON_key_value_pair::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool JSON_key_value_pair::has_value() const {
  return _internal_has_value();
}
inline void JSON_key_value_pair::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::JSON_value& JSON_key_value_pair::_internal_value() const {
  const ::JSON_value* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSON_value&>(
      ::_JSON_value_default_instance_);
}
inline const ::JSON_value& JSON_key_value_pair::value() const {
  // @@protoc_insertion_point(field_get:JSON_key_value_pair.value)
  return _internal_value();
}
inline void JSON_key_value_pair::unsafe_arena_set_allocated_value(
    ::JSON_value* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSON_key_value_pair.value)
}
inline ::JSON_value* JSON_key_value_pair::release_value() {
  
  ::JSON_value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::JSON_value* JSON_key_value_pair::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:JSON_key_value_pair.value)
  
  ::JSON_value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::JSON_value* JSON_key_value_pair::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSON_value>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::JSON_value* JSON_key_value_pair::mutable_value() {
  ::JSON_value* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:JSON_key_value_pair.value)
  return _msg;
}
inline void JSON_key_value_pair::set_allocated_value(::JSON_value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:JSON_key_value_pair.value)
}

// -------------------------------------------------------------------

// JSON_array

// repeated .JSON_array_item items = 1;
inline int JSON_array::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int JSON_array::items_size() const {
  return _internal_items_size();
}
inline void JSON_array::clear_items() {
  _impl_.items_.Clear();
}
inline ::JSON_array_item* JSON_array::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:JSON_array.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSON_array_item >*
JSON_array::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:JSON_array.items)
  return &_impl_.items_;
}
inline const ::JSON_array_item& JSON_array::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::JSON_array_item& JSON_array::items(int index) const {
  // @@protoc_insertion_point(field_get:JSON_array.items)
  return _internal_items(index);
}
inline ::JSON_array_item* JSON_array::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::JSON_array_item* JSON_array::add_items() {
  ::JSON_array_item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:JSON_array.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSON_array_item >&
JSON_array::items() const {
  // @@protoc_insertion_point(field_list:JSON_array.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// JSON_array_item

// .JSON_value value = 1;
inline bool JSON_array_item::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool JSON_array_item::has_value() const {
  return _internal_has_value();
}
inline void JSON_array_item::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::JSON_value& JSON_array_item::_internal_value() const {
  const ::JSON_value* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSON_value&>(
      ::_JSON_value_default_instance_);
}
inline const ::JSON_value& JSON_array_item::value() const {
  // @@protoc_insertion_point(field_get:JSON_array_item.value)
  return _internal_value();
}
inline void JSON_array_item::unsafe_arena_set_allocated_value(
    ::JSON_value* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSON_array_item.value)
}
inline ::JSON_value* JSON_array_item::release_value() {
  
  ::JSON_value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::JSON_value* JSON_array_item::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:JSON_array_item.value)
  
  ::JSON_value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::JSON_value* JSON_array_item::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSON_value>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::JSON_value* JSON_array_item::mutable_value() {
  ::JSON_value* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:JSON_array_item.value)
  return _msg;
}
inline void JSON_array_item::set_allocated_value(::JSON_value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:JSON_array_item.value)
}

// -------------------------------------------------------------------

// JSON_number

// int64 long = 1;
inline bool JSON_number::_internal_has_long_() const {
  return value_case() == kLong;
}
inline bool JSON_number::has_long_() const {
  return _internal_has_long_();
}
inline void JSON_number::set_has_long_() {
  _impl_._oneof_case_[0] = kLong;
}
inline void JSON_number::clear_long_() {
  if (_internal_has_long_()) {
    _impl_.value_.long__ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t JSON_number::_internal_long_() const {
  if (_internal_has_long_()) {
    return _impl_.value_.long__;
  }
  return int64_t{0};
}
inline void JSON_number::_internal_set_long_(int64_t value) {
  if (!_internal_has_long_()) {
    clear_value();
    set_has_long_();
  }
  _impl_.value_.long__ = value;
}
inline int64_t JSON_number::long_() const {
  // @@protoc_insertion_point(field_get:JSON_number.long)
  return _internal_long_();
}
inline void JSON_number::set_long_(int64_t value) {
  _internal_set_long_(value);
  // @@protoc_insertion_point(field_set:JSON_number.long)
}

// double double = 2;
inline bool JSON_number::_internal_has_double_() const {
  return value_case() == kDouble;
}
inline bool JSON_number::has_double_() const {
  return _internal_has_double_();
}
inline void JSON_number::set_has_double_() {
  _impl_._oneof_case_[0] = kDouble;
}
inline void JSON_number::clear_double_() {
  if (_internal_has_double_()) {
    _impl_.value_.double__ = 0;
    clear_has_value();
  }
}
inline double JSON_number::_internal_double_() const {
  if (_internal_has_double_()) {
    return _impl_.value_.double__;
  }
  return 0;
}
inline void JSON_number::_internal_set_double_(double value) {
  if (!_internal_has_double_()) {
    clear_value();
    set_has_double_();
  }
  _impl_.value_.double__ = value;
}
inline double JSON_number::double_() const {
  // @@protoc_insertion_point(field_get:JSON_number.double)
  return _internal_double_();
}
inline void JSON_number::set_double_(double value) {
  _internal_set_double_(value);
  // @@protoc_insertion_point(field_set:JSON_number.double)
}

inline bool JSON_number::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void JSON_number::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline JSON_number::ValueCase JSON_number::value_case() const {
  return JSON_number::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// JSON_null

// -------------------------------------------------------------------

// JSON_inp

// .JSON_object obj = 1;
inline bool JSON_inp::_internal_has_obj() const {
  return this != internal_default_instance() && _impl_.obj_ != nullptr;
}
inline bool JSON_inp::has_obj() const {
  return _internal_has_obj();
}
inline void JSON_inp::clear_obj() {
  if (GetArenaForAllocation() == nullptr && _impl_.obj_ != nullptr) {
    delete _impl_.obj_;
  }
  _impl_.obj_ = nullptr;
}
inline const ::JSON_object& JSON_inp::_internal_obj() const {
  const ::JSON_object* p = _impl_.obj_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSON_object&>(
      ::_JSON_object_default_instance_);
}
inline const ::JSON_object& JSON_inp::obj() const {
  // @@protoc_insertion_point(field_get:JSON_inp.obj)
  return _internal_obj();
}
inline void JSON_inp::unsafe_arena_set_allocated_obj(
    ::JSON_object* obj) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_);
  }
  _impl_.obj_ = obj;
  if (obj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSON_inp.obj)
}
inline ::JSON_object* JSON_inp::release_obj() {
  
  ::JSON_object* temp = _impl_.obj_;
  _impl_.obj_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::JSON_object* JSON_inp::unsafe_arena_release_obj() {
  // @@protoc_insertion_point(field_release:JSON_inp.obj)
  
  ::JSON_object* temp = _impl_.obj_;
  _impl_.obj_ = nullptr;
  return temp;
}
inline ::JSON_object* JSON_inp::_internal_mutable_obj() {
  
  if (_impl_.obj_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSON_object>(GetArenaForAllocation());
    _impl_.obj_ = p;
  }
  return _impl_.obj_;
}
inline ::JSON_object* JSON_inp::mutable_obj() {
  ::JSON_object* _msg = _internal_mutable_obj();
  // @@protoc_insertion_point(field_mutable:JSON_inp.obj)
  return _msg;
}
inline void JSON_inp::set_allocated_obj(::JSON_object* obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.obj_;
  }
  if (obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obj);
    if (message_arena != submessage_arena) {
      obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obj_ = obj;
  // @@protoc_insertion_point(field_set_allocated:JSON_inp.obj)
}

// .JSON_key_value_pair kv_pair = 2;
inline bool JSON_inp::_internal_has_kv_pair() const {
  return this != internal_default_instance() && _impl_.kv_pair_ != nullptr;
}
inline bool JSON_inp::has_kv_pair() const {
  return _internal_has_kv_pair();
}
inline void JSON_inp::clear_kv_pair() {
  if (GetArenaForAllocation() == nullptr && _impl_.kv_pair_ != nullptr) {
    delete _impl_.kv_pair_;
  }
  _impl_.kv_pair_ = nullptr;
}
inline const ::JSON_key_value_pair& JSON_inp::_internal_kv_pair() const {
  const ::JSON_key_value_pair* p = _impl_.kv_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSON_key_value_pair&>(
      ::_JSON_key_value_pair_default_instance_);
}
inline const ::JSON_key_value_pair& JSON_inp::kv_pair() const {
  // @@protoc_insertion_point(field_get:JSON_inp.kv_pair)
  return _internal_kv_pair();
}
inline void JSON_inp::unsafe_arena_set_allocated_kv_pair(
    ::JSON_key_value_pair* kv_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kv_pair_);
  }
  _impl_.kv_pair_ = kv_pair;
  if (kv_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSON_inp.kv_pair)
}
inline ::JSON_key_value_pair* JSON_inp::release_kv_pair() {
  
  ::JSON_key_value_pair* temp = _impl_.kv_pair_;
  _impl_.kv_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::JSON_key_value_pair* JSON_inp::unsafe_arena_release_kv_pair() {
  // @@protoc_insertion_point(field_release:JSON_inp.kv_pair)
  
  ::JSON_key_value_pair* temp = _impl_.kv_pair_;
  _impl_.kv_pair_ = nullptr;
  return temp;
}
inline ::JSON_key_value_pair* JSON_inp::_internal_mutable_kv_pair() {
  
  if (_impl_.kv_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSON_key_value_pair>(GetArenaForAllocation());
    _impl_.kv_pair_ = p;
  }
  return _impl_.kv_pair_;
}
inline ::JSON_key_value_pair* JSON_inp::mutable_kv_pair() {
  ::JSON_key_value_pair* _msg = _internal_mutable_kv_pair();
  // @@protoc_insertion_point(field_mutable:JSON_inp.kv_pair)
  return _msg;
}
inline void JSON_inp::set_allocated_kv_pair(::JSON_key_value_pair* kv_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kv_pair_;
  }
  if (kv_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kv_pair);
    if (message_arena != submessage_arena) {
      kv_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kv_pair, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kv_pair_ = kv_pair;
  // @@protoc_insertion_point(field_set_allocated:JSON_inp.kv_pair)
}

// -------------------------------------------------------------------

// JSON_opt

// .JSON_inp inp = 1;
inline bool JSON_opt::_internal_has_inp() const {
  return value_case() == kInp;
}
inline bool JSON_opt::has_inp() const {
  return _internal_has_inp();
}
inline void JSON_opt::set_has_inp() {
  _impl_._oneof_case_[0] = kInp;
}
inline void JSON_opt::clear_inp() {
  if (_internal_has_inp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.inp_;
    }
    clear_has_value();
  }
}
inline ::JSON_inp* JSON_opt::release_inp() {
  // @@protoc_insertion_point(field_release:JSON_opt.inp)
  if (_internal_has_inp()) {
    clear_has_value();
    ::JSON_inp* temp = _impl_.value_.inp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.inp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JSON_inp& JSON_opt::_internal_inp() const {
  return _internal_has_inp()
      ? *_impl_.value_.inp_
      : reinterpret_cast< ::JSON_inp&>(::_JSON_inp_default_instance_);
}
inline const ::JSON_inp& JSON_opt::inp() const {
  // @@protoc_insertion_point(field_get:JSON_opt.inp)
  return _internal_inp();
}
inline ::JSON_inp* JSON_opt::unsafe_arena_release_inp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:JSON_opt.inp)
  if (_internal_has_inp()) {
    clear_has_value();
    ::JSON_inp* temp = _impl_.value_.inp_;
    _impl_.value_.inp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JSON_opt::unsafe_arena_set_allocated_inp(::JSON_inp* inp) {
  clear_value();
  if (inp) {
    set_has_inp();
    _impl_.value_.inp_ = inp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSON_opt.inp)
}
inline ::JSON_inp* JSON_opt::_internal_mutable_inp() {
  if (!_internal_has_inp()) {
    clear_value();
    set_has_inp();
    _impl_.value_.inp_ = CreateMaybeMessage< ::JSON_inp >(GetArenaForAllocation());
  }
  return _impl_.value_.inp_;
}
inline ::JSON_inp* JSON_opt::mutable_inp() {
  ::JSON_inp* _msg = _internal_mutable_inp();
  // @@protoc_insertion_point(field_mutable:JSON_opt.inp)
  return _msg;
}

// .JSON_object obj = 2;
inline bool JSON_opt::_internal_has_obj() const {
  return value_case() == kObj;
}
inline bool JSON_opt::has_obj() const {
  return _internal_has_obj();
}
inline void JSON_opt::set_has_obj() {
  _impl_._oneof_case_[0] = kObj;
}
inline void JSON_opt::clear_obj() {
  if (_internal_has_obj()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.obj_;
    }
    clear_has_value();
  }
}
inline ::JSON_object* JSON_opt::release_obj() {
  // @@protoc_insertion_point(field_release:JSON_opt.obj)
  if (_internal_has_obj()) {
    clear_has_value();
    ::JSON_object* temp = _impl_.value_.obj_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.obj_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JSON_object& JSON_opt::_internal_obj() const {
  return _internal_has_obj()
      ? *_impl_.value_.obj_
      : reinterpret_cast< ::JSON_object&>(::_JSON_object_default_instance_);
}
inline const ::JSON_object& JSON_opt::obj() const {
  // @@protoc_insertion_point(field_get:JSON_opt.obj)
  return _internal_obj();
}
inline ::JSON_object* JSON_opt::unsafe_arena_release_obj() {
  // @@protoc_insertion_point(field_unsafe_arena_release:JSON_opt.obj)
  if (_internal_has_obj()) {
    clear_has_value();
    ::JSON_object* temp = _impl_.value_.obj_;
    _impl_.value_.obj_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JSON_opt::unsafe_arena_set_allocated_obj(::JSON_object* obj) {
  clear_value();
  if (obj) {
    set_has_obj();
    _impl_.value_.obj_ = obj;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSON_opt.obj)
}
inline ::JSON_object* JSON_opt::_internal_mutable_obj() {
  if (!_internal_has_obj()) {
    clear_value();
    set_has_obj();
    _impl_.value_.obj_ = CreateMaybeMessage< ::JSON_object >(GetArenaForAllocation());
  }
  return _impl_.value_.obj_;
}
inline ::JSON_object* JSON_opt::mutable_obj() {
  ::JSON_object* _msg = _internal_mutable_obj();
  // @@protoc_insertion_point(field_mutable:JSON_opt.obj)
  return _msg;
}

inline bool JSON_opt::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void JSON_opt::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline JSON_opt::ValueCase JSON_opt::value_case() const {
  return JSON_opt::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_json_2eproto
